{"ast":null,"code":"var _jsxFileName = \"/Users/jaewongim/Documents/GitHub/React_Todolist/src/components/TodoContext.js\";\nimport React, { useReducer, createContext, useContext, useRef } from 'react';\nconst initialTodos = [{\n  id: 1,\n  text: '프로젝트 생성하기',\n  done: true\n}, {\n  id: 2,\n  text: '컴포넌트 스타일링하기',\n  done: true\n}, {\n  id: 3,\n  text: 'Context 만들기',\n  done: true\n}, {\n  id: 3,\n  text: '기능 구현하기',\n  done: true\n}];\n/*\n    CREATE\n    TOGGLE\n    REMOVE\n*/\n\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case 'CREATE':\n      return state.concat(action.todo);\n\n    case 'TOGGLE':\n      //모든 todo에 대해서 변환\n      return state.map(todo => todo.id === action.id ? { ...todo,\n        done: !todo.done\n      } : todo);\n    //action.id와 일치하지않는 값만 가져옴\n\n    case 'REMOVE':\n      return state.filter(todo => todo.id !== action.id);\n    //처리할 수 없는 액션\n\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n}\n\nconst TodoStateContext = createContext();\nconst TodoDispatchContext = createContext();\nconst TodoNextIdContext = createContext();\nexport function TodoProvider({\n  children\n}) {\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\n  const nextId = useRef(5);\n  return /*#__PURE__*/React.createElement(TodoStateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TodoDispatchContext.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TodoNextIdContext.Provider, {\n    value: nextId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, children)));\n}\nexport function useTodoState() {\n  //에러 처리\n  const context = useContext(TodoStateContext);\n\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n\n  return context;\n}\nexport function useTodoDispatch() {\n  //에러 처리\n  const context = useContext(TodoDispatchContext);\n\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n\n  return context;\n}\nexport function useTodoNextId() {\n  //에러 처리\n  const context = useContext(TodoNextIdContext);\n\n  if (!context) {\n    throw new Error('Cannot find TodoProvider');\n  }\n\n  return context;\n}\n\nfunction TodoContext() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default TodoContext;","map":{"version":3,"sources":["/Users/jaewongim/Documents/GitHub/React_Todolist/src/components/TodoContext.js"],"names":["React","useReducer","createContext","useContext","useRef","initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","children","dispatch","nextId","useTodoState","context","useTodoDispatch","useTodoNextId","TodoContext"],"mappings":"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","sourcesContent":["import React, { useReducer, createContext,useContext, useRef } from 'react';\n\nconst initialTodos = [\n    {\n        id: 1, \n        text: '프로젝트 생성하기',\n        done: true\n    },\n    {\n        id: 2, \n        text: '컴포넌트 스타일링하기',\n        done: true\n    },\n    {\n        id: 3, \n        text: 'Context 만들기',\n        done: true\n    },\n    {\n        id: 3, \n        text: '기능 구현하기',\n        done: true\n    }\n];\n\n/*\n    CREATE\n    TOGGLE\n    REMOVE\n*/\nfunction todoReducer(state, action) {\n    switch (action.type) {\n        case 'CREATE':\n            return state.concat(action.todo);\n        case 'TOGGLE':\n            //모든 todo에 대해서 변환\n            return state.map(\n                todo => todo.id === action.id ? { ...todo, done: !todo.done } : todo\n            );\n            //action.id와 일치하지않는 값만 가져옴\n        case 'REMOVE':\n            return state.filter(todo => todo.id !== action.id);\n            //처리할 수 없는 액션\n        default : \n            throw new Error(`Unhandled action type: ${action.type}`);\n    }\n}\n\n\nconst TodoStateContext = createContext();\nconst TodoDispatchContext = createContext();\nconst TodoNextIdContext = createContext();\n\n\n\nexport function TodoProvider({ children }) {\n    const [state, dispatch] = useReducer(todoReducer, initialTodos);\n    const nextId = useRef(5);\n\n    return (\n        <TodoStateContext.Provider value = {state}>\n            <TodoDispatchContext.Provider value = {dispatch}>\n                <TodoNextIdContext.Provider value = {nextId}>\n                {children}\n                </TodoNextIdContext.Provider>\n            </TodoDispatchContext.Provider>\n        </TodoStateContext.Provider>\n    )\n}\n\nexport function useTodoState() {\n    //에러 처리\n    const context = useContext(TodoStateContext);\n    if (!context) {\n        throw new Error('Cannot find TodoProvider');\n    }\n    return context;\n}\n\nexport function useTodoDispatch() {\n    //에러 처리\n    const context = useContext(TodoDispatchContext);\n    if (!context) {\n        throw new Error('Cannot find TodoProvider');\n    }\n    return context;\n}\n\n\nexport function useTodoNextId() {\n    //에러 처리\n    const context = useContext(TodoNextIdContext);\n    if (!context) {\n        throw new Error('Cannot find TodoProvider');\n    }\n    return context;\n}\n\n\nfunction TodoContext() {\n    return (\n        <div>\n            \n        </div>\n    )\n}\nexport default TodoContext;"]},"metadata":{},"sourceType":"module"}